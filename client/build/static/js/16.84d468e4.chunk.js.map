{"version":3,"sources":["layout/Sidebar/Styles.js","layout/Sidebar/ParlorChange.jsx","layout/Sidebar/index.jsx"],"names":["Sidebar","styled","div","zIndexValues","navLeft","sizes","appNavBarLeftWidth","secondarySideBarWidth","color","backgroundLightest","borderLightest","mixin","scrollableY","customScrollbar","ProjectInfo","ProjectTexts","ProjectName","textDark","font","size","medium","ProjectCategory","textMedium","Divider","borderLight","LinkItem","clickable","props","to","backgroundLight","primary","LinkText","NotImplemented","backgroundMedium","bold","Content","SubmitButton","Button","Actions","ParlorChange","useContext","AuthenticationContext","dispatch","user","currentParlor","parlor","parlors","useMemo","profile","find","el","id","useState","modal","setModal","toggleModal","useCallback","prev","selectedParlor","setSelectedParlor","setParlor","parlorId","authenticationActions","useEffect","length","onClick","undefined","name","role","isOpen","testid","width","withCloseIcon","renderContent","onChange","options","map","label","value","variant","disabled","renderLinkItem","match","text","iconType","path","isImplemented","linkItemProps","as","NavLink","exact","type","ProjectSidebar","useRouteMatch"],"mappings":"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","file":"static/js/16.84d468e4.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nimport { color, sizes, font, mixin, zIndexValues } from \"../../shared/utils/styles\"\nimport { Button } from \"../../shared/components\"\n\nexport const Sidebar = styled.div`\n  position: fixed;\n  z-index: ${zIndexValues.navLeft - 1};\n  top: 0;\n  left: ${sizes.appNavBarLeftWidth}px;\n  height: 100vh;\n  width: ${sizes.secondarySideBarWidth}px;\n  padding: 0 16px 24px;\n  background: ${color.backgroundLightest};\n  border-right: 1px solid ${color.borderLightest};\n  ${mixin.scrollableY}\n  ${mixin.customScrollbar()}\n  @media (max-width: 1100px) {\n    width: ${sizes.secondarySideBarWidth - 10}px;\n  }\n  @media (max-width: 999px) {\n    display: none;\n  }\n`\n\nexport const ProjectInfo = styled.div`\n  display: flex;\n  padding: 24px 4px;\n`\n\nexport const ProjectTexts = styled.div`\n  padding: 3px 0 0 10px;\n`\n\nexport const ProjectName = styled.div`\n  color: ${color.textDark};\n  ${font.size(15)};\n  ${font.medium};\n`\n\nexport const ProjectCategory = styled.div`\n  color: ${color.textMedium};\n  ${font.size(13)};\n`\n\nexport const Divider = styled.div`\n  margin-top: 17px;\n  padding-top: 18px;\n  border-top: 1px solid ${color.borderLight};\n`\n\nexport const LinkItem = styled.div`\n  position: relative;\n  display: flex;\n  padding: 8px 12px;\n  border-radius: 3px;\n  ${mixin.clickable}\n  ${props =>\n  !props.to ? `cursor: not-allowed;` : `&:hover { background: ${color.backgroundLight}; }`}\n  i {\n    margin-right: 15px;\n    font-size: 20px;\n  }\n  &.active {\n    color: ${color.primary};\n    background: ${color.backgroundLight};\n    i {\n      color: ${color.primary};\n    }\n  }\n`\n\nexport const LinkText = styled.div`\n  padding-top: 2px;\n  ${font.size(14.7)};\n`\n\nexport const NotImplemented = styled.div`\n  display: inline-block;\n  position: absolute;\n  top: 7px;\n  left: 40px;\n  width: 140px;\n  padding: 5px 0 5px 8px;\n  border-radius: 3px;\n  text-transform: uppercase;\n  color: ${color.textDark};\n  background: ${color.backgroundMedium};\n  opacity: 0;\n  ${font.size(11.5)};\n  ${font.bold}\n  ${LinkItem}:hover & {\n    opacity: 1;\n  }\n`\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 25px;\n`\n\nexport const SubmitButton = styled(Button)`\n  margin-left: 10px;\n`\n\nexport const Actions = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n  justify-content: flex-end;\n`","import React, { Fragment, useCallback, useContext, useEffect, useMemo, useState } from \"react\"\nimport { authenticationActions } from \"../../store/actions\"\nimport { Actions, Content, ProjectCategory, ProjectInfo, ProjectName, ProjectTexts, SubmitButton } from \"./Styles\"\nimport { Modal, ProjectAvatar, Select } from \"../../shared/components\"\nimport { AuthenticationContext } from \"../../services/authentication.service\"\n\n\nconst ParlorChange = () => {\n  const { dispatch, user, parlor: currentParlor } = useContext(AuthenticationContext)\n  const parlors = useMemo(() => user?.profile || [], [user])\n  const parlor = useMemo(\n    () => parlors.find(el => el.parlor.id === currentParlor),\n    [parlors, currentParlor]\n  )\n  const [modal, setModal] = useState(false)\n  const toggleModal = useCallback(() => {\n    setModal(prev => !prev)\n  }, [])\n  const [selectedParlor, setSelectedParlor] = useState()\n  const setParlor = useCallback((parlorId = null) => {\n    dispatch(authenticationActions.setParlor(selectedParlor || parlorId))\n    setModal(false)\n  }, [selectedParlor, dispatch])\n\n  useEffect(() => {\n    if (!currentParlor && parlors.length === 1) {\n      setParlor(parlors[0].parlor.id)\n    } else if (currentParlor && parlors.length === 1) {\n      if (!parlors.find(el => el.parlor.id === currentParlor)) {\n        setParlor(parlors[0].parlor.id)\n      }\n    }\n  }, [setParlor, parlors, currentParlor])\n\n  return <ProjectInfo>\n    <ProjectAvatar onClick={parlors.length > 1 ? toggleModal : undefined} />\n    <ProjectTexts>\n      <ProjectName>{parlor?.parlor?.name}</ProjectName>\n      <ProjectCategory>{parlor?.role}</ProjectCategory>\n      <Modal\n        isOpen={!parlor || modal}\n        testid=\"modal:change-parlor\"\n        width={400}\n        withCloseIcon={false}\n        renderContent={() => (\n          <Fragment>\n            <Content>\n              <Select\n                onChange={setSelectedParlor}\n                options={parlors.map(el => ({ label: el.parlor.name, value: el.parlor.id }))}\n              />\n              <Actions>\n                <SubmitButton\n                  onClick={setParlor}\n                  variant=\"primary\"\n                  disabled={!selectedParlor}\n                >\n                  Выбрать\n                </SubmitButton>\n                {!!parlor && <SubmitButton onClick={toggleModal} variant=\"empty\">\n                  Отменить\n                </SubmitButton>}\n              </Actions>\n            </Content>\n          </Fragment>\n        )\n        }\n      />\n    </ProjectTexts>\n  </ProjectInfo>\n}\n\n\nexport default ParlorChange","import React from \"react\"\nimport { NavLink, useRouteMatch } from \"react-router-dom\"\n\nimport { Icon } from \"../../shared/components\"\n\nimport {\n  Sidebar,\n  Divider,\n  LinkItem,\n  LinkText,\n  NotImplemented\n} from \"./Styles\"\nimport ParlorChange from \"./ParlorChange\"\n\nconst ProjectSidebar = () => {\n  const match = useRouteMatch()\n\n  return (\n    <Sidebar>\n      <ParlorChange />\n      {renderLinkItem(match, \"Панель управления\", \"board\", \"/dashboard\")}\n      {renderLinkItem(match, \"Сотрудники\", \"user\", \"/employees\")}\n      {renderLinkItem(match, \"Клиенты\", \"customers\", \"/customers\")}\n      {/*{renderLinkItem(match, \"Project settings\", \"settings\", \"/settings\")}*/}\n      <Divider />\n      {renderLinkItem(match, \"Рабочий график\", \"calendar\")}\n      {renderLinkItem(match, \"Склад\", \"shop\")}\n      {renderLinkItem(match, \"Отчеты\", \"reports\")}\n    </Sidebar>\n  )\n}\n\nconst renderLinkItem = (match, text, iconType, path) => {\n  const isImplemented = !!path\n\n  const linkItemProps = isImplemented\n    ? { as: NavLink, exact: true, to: path }\n    : { as: \"div\" }\n\n  return (\n    <LinkItem {...linkItemProps}>\n      <Icon type={iconType} />\n      <LinkText>{text}</LinkText>\n      {!isImplemented && <NotImplemented>Not implemented</NotImplemented>}\n    </LinkItem>\n  )\n}\n\nexport default ProjectSidebar"],"sourceRoot":""}